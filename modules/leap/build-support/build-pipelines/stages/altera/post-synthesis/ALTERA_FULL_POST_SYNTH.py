import os
import re
import sys
import SCons.Script
import model
import synthesis_library 

class PostSynthesize():

    def __init__(self, moduleList):
        altera_apm_name = moduleList.compileDirectory + '/' + moduleList.apmName

        #synthDeps = moduleList.topModule.moduleDependency['SYNTHESIS']


        newPrjFile = open(altera_apm_name + '.temp.qsf', 'w')


        # Add in all the verilog here. 
        [globalVerilogs, globalVHDs] = synthesis_library.globalRTLs(moduleList, moduleList.moduleList)
         

        # gather verilog for LI Modules. 
        for module in [ mod for mod in moduleList.synthBoundaries()] + [moduleList.topModule]:
            globalVerilogs += [model.get_temp_path(moduleList,module) + module.wrapperName() + '.v']

        for v in globalVerilogs:
            newPrjFile.write('set_global_assignment -name VERILOG_FILE ' + v + '\n'); 


        for v in globalVHDs:
            newPrjFile.write('set_global_assignment -name VHDL_FILE ' + v + '\n'); 



        # add the verilogs of the files generated by quartus system builder
        for v in model.Utils.clean_split(moduleList.env['DEFS']['GIVEN_ALTERAVS'], sep = ' ') :
            newPrjFile.write('set_global_assignment -name VERILOG_FILE ' + v + '\n'); 

        newPrjFile.write('set_global_assignment -name SDC_FILE ' + moduleList.topModule.wrapperName() + '.scf\n')
        newPrjFile.write('set_global_assignment -name TOP_LEVEL_ENTITY ' + moduleList.topModule.wrapperName() + '\n')
        newPrjFile.close()

        # Concatenate altera QSF files
        altera_qsf = moduleList.env.Command(
          altera_apm_name + '.qsf',
          [altera_apm_name + '.temp.qsf'] + model.Utils.clean_split(moduleList.env['DEFS']['GIVEN_QSFS'], sep = ' '),
          ['cat $SOURCES > $TARGET',
           'rm ' + altera_apm_name + '.temp.qsf'])

        # generate sof
        altera_sof = moduleList.env.Command(altera_apm_name + '.sof',
                                            globalVerilogs + globalVHDs + [altera_qsf],
                                            ['quartus_map --verilog_macro="QUARTUS_COMPILATION=1" --lib_path=`pwd` ' + altera_apm_name,
                                             'quartus_fit ' + altera_apm_name,
                                             'quartus_sta ' + altera_apm_name,
                                             'quartus_asm ' + altera_apm_name])

        moduleList.topModule.moduleDependency['BIT'] = [altera_sof]

        # generate the download program
        newDownloadFile = open('config/' + moduleList.apmName + '.download.temp', 'w')
        newDownloadFile.write('#!/bin/sh\n')
        newDownloadFile.write('nios2-configure-sof ' + altera_apm_name + '.sof\n')
        newDownloadFile.close()

        altera_download = moduleList.env.Command(
            'config/' + moduleList.apmName + '.download',
            'config/' + moduleList.apmName + '.download.temp',
            ['cp $SOURCE $TARGET',
             'chmod 755 $TARGET'])

        altera_loader = moduleList.env.Command(
            moduleList.apmName + '_hw.errinfo',
            moduleList.swExe + moduleList.topModule.moduleDependency['BIT'] + altera_download,
            ['@ln -fs ' + moduleList.swExeOrTarget + ' ' + moduleList.apmName,
             SCons.Script.Delete(moduleList.apmName + '_hw.exe'),
             SCons.Script.Delete(moduleList.apmName + '_hw.vexe'),
             '@echo "++++++++++++ Post-Place & Route ++++++++"',
             'touch ' + moduleList.apmName + '_hw.errinfo'])

        moduleList.topModule.moduleDependency['LOADER'] = [altera_loader]
        moduleList.topDependency = moduleList.topDependency + [altera_loader]
